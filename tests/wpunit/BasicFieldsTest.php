<?php

class BasicFieldsTest extends \Codeception\TestCase\WPTestCase {

	public function _setUp() {
		$this->delete_all_field_groups();
		$this->import_field_group( dirname( __FILE__, 2 ) . '/_data/acf-basic-fields.json' );

		parent::_setUp(); // TODO: Change the autogenerated stub

	}

	public function _tearDown() {
		return parent::_tearDown(); // TODO: Change the autogenerated stub
		$this->delete_all_field_groups();
	}

	public function delete_all_field_groups() {
		$acf_field_groups = acf_get_field_groups();

		codecept_debug( [
			'ALL_FIELD_GROUPS' => $acf_field_groups,
		]);

		foreach ( $acf_field_groups as $field_group ) {
			acf_delete_field_group( $field_group['key'] );
		}
	}

	public function import_field_group( $path ): void {

		if ( ! file_exists( $path ) ) {
			throw new Exception( sprintf( 'The path "%s" is not valid', $path ) );
		}

		$import = json_decode( file_get_contents( $path ), true );
		if ( isset( $import['key'] ) ) {
			$import = array( $import );
		}

		foreach ( $import as $field_group ) {
			// Search database for existing field group.
			$post = acf_get_field_group_post( $field_group['key'] );
			if ( $post ) {
				$field_group['ID'] = $post->ID;
			}

			// Import field group.
			acf_import_field_group( $field_group );
		}

		WPGraphQL::clear_schema();
	}

	/**
	 * @throws Exception
	 */
	public function testImportFields() {

		$query = '
		{
		  posts {
		    nodes {
		      id
		      title
		      ...on WithAcfBasicFields {
		        basicFields {
		          basicText
		        }
		      }
		    }
		  }
		}
		';

		$actual = graphql([
			'query' => $query,
		]);

		codecept_debug( $actual );

		$this->assertArrayNotHasKey( 'errors', $actual );

	}

}
